# 旧照片修复网站 - Cursor编辑器规则与最佳实践

## 项目设置
- 遵循Next.js + Tailwind CSS + TypeScript最佳实践
- 严格保持英语作为初期唯一语言界面
- 保持代码模块化，功能明确分离

## 代码风格
- 使用2空格缩进
- 使用单引号字符串
- 使用分号结束语句
- 使用ES6+语法特性
- 函数长度不超过30行，保持简单明了
- 组件保持单一职责，复杂组件拆分

## 命名约定
- 组件使用PascalCase (例如: PhotoUploader, RestoreButton)
- 函数和变量使用camelCase (例如: processImage, uploadStatus)
- 常量使用UPPER_SNAKE_CASE (例如: API_KEY, MAX_FILE_SIZE)
- 文件命名:
  - 组件文件: PascalCase.tsx
  - 页面文件: kebab-case.tsx
  - 工具函数: camelCase.ts

## 每日开发工作流 (2小时总时间)
1. **30分钟**: 核心功能开发，严格遵循MVP优先级
2. **30分钟**: 测试和错误修复
3. **30分钟**: 内容和案例创建
4. **30分钟**: 社区互动和用户反馈

## 优先顺序
1. 功能可用性 > 代码优雅
2. MVP核心功能 > 高级特性
3. 用户体验 > 技术完美
4. 可维护性 > 复杂优化

## 文件组织
/components    - 所有React组件
/pages         - Next.js页面
/styles        - CSS和Tailwind配置
/utils         - 工具函数
/lib           - API包装器
/public        - 静态资源

## 关键词指导
- 使用精确的技术术语
- SEO重点关键词应出现在标题和首段
- 保持内容专注于照片修复

## API和环境变量
- 永不硬编码API密钥
- 使用.env.local文件存储本地环境变量
- 使用Vercel UI设置生产环境变量

## 性能考虑
- 图片输入限制在5MB以内
- 使用WebP格式和图像优化
- 实现懒加载和优化加载流程
- 创建有用的加载状态界面

## 腾讯云使用
- 避免长时间空闲运行
- 设置自动关机脚本(6小时不活动)
- 监控资源使用并记录
- 批量处理请求减少API调用

## 时间管理
- 遵循60天时间线的关键节点
- 每周结束回顾进度
- 尽量不引入时间线外的功能
- 功能完成即部署，避免完美主义

## Redux开发实践
- 保持状态树简单扁平
- 尽量减少不必要的action
- 使用Redux Toolkit简化代码

## 定期部署
- 功能完成即合并到main分支
- 设置自动部署到Vercel
- 保持小步快速迭代而非大型发布

## 营销相关
- 准备8-10个高质量照片修复案例
- 创建关键词丰富的修复前后展示页面
- 优化社交分享元标签

## 里程碑跟踪规则
- 每次打开项目时，Cursor自动显示当天任务
- 查看milestone-checklist.md了解完整进度
- 使用`[x]`标记已完成任务，保持`[ ]`表示未完成
- 每日工作结束时更新清单进度
- 每周日进行周进度回顾，调整下周计划
- 依据项目阶段，Cursor将提醒当前优先任务

## 每日任务提醒
- Cursor将根据项目启动日期计算当前处于哪一天
- 在IDE启动时显示当天需完成的技术和营销任务
- 优先级标识：🔴高 🟠中 🟢低
- 未完成的前序任务将被优先提醒
- 每日2小时工作时间内优先完成清单上的任务

## 进度更新流程
1. 完成任务后立即在milestone-checklist.md中更新状态
2. 提交代码时参考当日任务编写合适的提交信息
3. 每日工作结束时进行简短进度总结
4. 每周进行一次周进度评估
5. 每30天进行阶段性评估，调整后续计划 